{"ast":null,"code":"/**\r\n * คำนวณสถิติผู้เล่นทั้งหมด\r\n */\nexport const calculatePlayerStats = (members, matches) => {\n  const stats = {};\n\n  // สร้าง object สำหรับเก็บสถิติแต่ละคน\n  members.forEach(member => {\n    stats[member.name] = {\n      ...member,\n      totalGames: 0,\n      gamesWon: 0,\n      totalScore: 0,\n      matchesPlayed: 0\n    };\n  });\n\n  // คำนวณจาก matches\n  matches.forEach(match => {\n    const team1Players = [match.team1Player1, match.team1Player2];\n    const team2Players = [match.team2Player1, match.team2Player2];\n    const team1Won = parseInt(match.scoreTeam1) > parseInt(match.scoreTeam2) ? 1 : 0;\n    const team2Won = parseInt(match.scoreTeam2) > parseInt(match.scoreTeam1) ? 1 : 0;\n    team1Players.forEach(playerName => {\n      if (stats[playerName]) {\n        stats[playerName].totalGames += 1;\n        stats[playerName].gamesWon += team1Won;\n        stats[playerName].totalScore += parseInt(match.scoreTeam1) || 0;\n        stats[playerName].matchesPlayed++;\n      }\n    });\n    team2Players.forEach(playerName => {\n      if (stats[playerName]) {\n        stats[playerName].totalGames += 1;\n        stats[playerName].gamesWon += team2Won;\n        stats[playerName].totalScore += parseInt(match.scoreTeam2) || 0;\n        stats[playerName].matchesPlayed++;\n      }\n    });\n  });\n\n  // เรียงตามคะแนนรวม\n  return Object.values(stats).sort((a, b) => b.totalScore - a.totalScore);\n};\n\n/**\r\n * คำนวณคะแนนรวมของแต่ละทีม\r\n */\nexport const calculateTeamStats = (playerStats, team) => {\n  const teamPlayers = playerStats.filter(p => p.team === team);\n  return {\n    totalScore: teamPlayers.reduce((sum, p) => sum + p.totalScore, 0),\n    totalSetsWon: teamPlayers.reduce((sum, p) => sum + p.gamesWon, 0),\n    totalPlayers: teamPlayers.length,\n    totalMatches: teamPlayers.reduce((sum, p) => sum + p.matchesPlayed, 0)\n  };\n};","map":{"version":3,"names":["calculatePlayerStats","members","matches","stats","forEach","member","name","totalGames","gamesWon","totalScore","matchesPlayed","match","team1Players","team1Player1","team1Player2","team2Players","team2Player1","team2Player2","team1Won","parseInt","scoreTeam1","scoreTeam2","team2Won","playerName","Object","values","sort","a","b","calculateTeamStats","playerStats","team","teamPlayers","filter","p","reduce","sum","totalSetsWon","totalPlayers","length","totalMatches"],"sources":["F:/bmt_app/src/utils/calculations.js"],"sourcesContent":["/**\r\n * คำนวณสถิติผู้เล่นทั้งหมด\r\n */\r\nexport const calculatePlayerStats = (members, matches) => {\r\n  const stats = {};\r\n  \r\n  // สร้าง object สำหรับเก็บสถิติแต่ละคน\r\n  members.forEach(member => {\r\n    stats[member.name] = {\r\n      ...member,\r\n      totalGames: 0,\r\n      gamesWon: 0,\r\n      totalScore: 0,\r\n      matchesPlayed: 0\r\n    };\r\n  });\r\n  \r\n  // คำนวณจาก matches\r\n  matches.forEach(match => {\r\n    const team1Players = [match.team1Player1, match.team1Player2];\r\n    const team2Players = [match.team2Player1, match.team2Player2];\r\n    const team1Won = parseInt(match.scoreTeam1) > parseInt(match.scoreTeam2) ? 1 : 0;\r\n    const team2Won = parseInt(match.scoreTeam2) > parseInt(match.scoreTeam1) ? 1 : 0;\r\n    \r\n    team1Players.forEach(playerName => {\r\n      if (stats[playerName]) {\r\n        stats[playerName].totalGames += 1;\r\n        stats[playerName].gamesWon += team1Won;\r\n        stats[playerName].totalScore += parseInt(match.scoreTeam1) || 0;\r\n        stats[playerName].matchesPlayed++;\r\n      }\r\n    });\r\n    \r\n    team2Players.forEach(playerName => {\r\n      if (stats[playerName]) {\r\n        stats[playerName].totalGames += 1;\r\n        stats[playerName].gamesWon += team2Won;\r\n        stats[playerName].totalScore += parseInt(match.scoreTeam2) || 0;\r\n        stats[playerName].matchesPlayed++;\r\n      }\r\n    });\r\n  });\r\n  \r\n  // เรียงตามคะแนนรวม\r\n  return Object.values(stats).sort((a, b) => b.totalScore - a.totalScore);\r\n};\r\n\r\n/**\r\n * คำนวณคะแนนรวมของแต่ละทีม\r\n */\r\nexport const calculateTeamStats = (playerStats, team) => {\r\n  const teamPlayers = playerStats.filter(p => p.team === team);\r\n  return {\r\n    totalScore: teamPlayers.reduce((sum, p) => sum + p.totalScore, 0),\r\n    totalSetsWon: teamPlayers.reduce((sum, p) => sum + p.gamesWon, 0),\r\n    totalPlayers: teamPlayers.length,\r\n    totalMatches: teamPlayers.reduce((sum, p) => sum + p.matchesPlayed, 0)\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}