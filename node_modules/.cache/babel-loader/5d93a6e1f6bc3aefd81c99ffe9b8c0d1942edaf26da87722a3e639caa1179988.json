{"ast":null,"code":"/**\r\n * บีบอัดและปรับขนาดรูปภาพอัตโนมัติ\r\n * @param {File} file - ไฟล์รูปภาพ\r\n * @param {number} maxSize - ขนาดสูงสุด (px) default: 400\r\n * @param {number} quality - คุณภาพ (0-1) default: 0.7\r\n * @returns {Promise<string>} - Base64 string\r\n */\nexport const compressImage = (file, maxSize = 400, quality = 0.7) => {\n  return new Promise((resolve, reject) => {\n    // ตรวจสอบขนาดไฟล์ (ถ้าเกิน 5MB ให้เตือน)\n    const maxFileSize = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxFileSize) {\n      reject(new Error('ไฟล์ใหญ่เกินไป กรุณาเลือกไฟล์ที่เล็กกว่า 5MB'));\n      return;\n    }\n    const reader = new FileReader();\n    reader.onerror = () => {\n      reject(new Error('ไม่สามารถอ่านไฟล์ได้'));\n    };\n    reader.onload = e => {\n      const img = new Image();\n      img.onerror = () => {\n        reject(new Error('ไฟล์ไม่ใช่รูปภาพที่ถูกต้อง'));\n      };\n      img.onload = () => {\n        try {\n          const canvas = document.createElement('canvas');\n          let width = img.width;\n          let height = img.height;\n\n          // คำนวณขนาดใหม่ (รักษาสัดส่วน)\n          if (width > height) {\n            if (width > maxSize) {\n              height = Math.round(height * maxSize / width);\n              width = maxSize;\n            }\n          } else {\n            if (height > maxSize) {\n              width = Math.round(width * maxSize / height);\n              height = maxSize;\n            }\n          }\n\n          // ตั้งค่า canvas\n          canvas.width = width;\n          canvas.height = height;\n          const ctx = canvas.getContext('2d');\n\n          // เพิ่มคุณภาพการ render\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = 'high';\n\n          // วาดรูปลง canvas\n          ctx.drawImage(img, 0, 0, width, height);\n\n          // แปลงเป็น base64 (JPEG สำหรับขนาดเล็กกว่า)\n          const compressedImage = canvas.toDataURL('image/jpeg', quality);\n\n          // ตรวจสอบขนาดผลลัพธ์\n          const sizeInBytes = Math.round(compressedImage.length * 3 / 4);\n          const sizeInKB = Math.round(sizeInBytes / 1024);\n          console.log(`Image compressed: ${sizeInKB}KB (${width}x${height})`);\n          resolve(compressedImage);\n        } catch (error) {\n          reject(new Error('เกิดข้อผิดพลาดในการบีบอัดรูป'));\n        }\n      };\n      img.src = e.target.result;\n    };\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\r\n * ตรวจสอบว่าเป็นไฟล์รูปภาพหรือไม่\r\n */\nexport const isImageFile = file => {\n  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n  return validTypes.includes(file.type);\n};\n\n/**\r\n * แปลงขนาดไฟล์เป็น string ที่อ่านง่าย\r\n */\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n};","map":{"version":3,"names":["compressImage","file","maxSize","quality","Promise","resolve","reject","maxFileSize","size","Error","reader","FileReader","onerror","onload","e","img","Image","canvas","document","createElement","width","height","Math","round","ctx","getContext","imageSmoothingEnabled","imageSmoothingQuality","drawImage","compressedImage","toDataURL","sizeInBytes","length","sizeInKB","console","log","error","src","target","result","readAsDataURL","isImageFile","validTypes","includes","type","formatFileSize","bytes","k","sizes","i","floor","pow"],"sources":["F:/bmt_app/src/utils/imageCompressor.js"],"sourcesContent":["/**\r\n * บีบอัดและปรับขนาดรูปภาพอัตโนมัติ\r\n * @param {File} file - ไฟล์รูปภาพ\r\n * @param {number} maxSize - ขนาดสูงสุด (px) default: 400\r\n * @param {number} quality - คุณภาพ (0-1) default: 0.7\r\n * @returns {Promise<string>} - Base64 string\r\n */\r\nexport const compressImage = (file, maxSize = 400, quality = 0.7) => {\r\n  return new Promise((resolve, reject) => {\r\n    // ตรวจสอบขนาดไฟล์ (ถ้าเกิน 5MB ให้เตือน)\r\n    const maxFileSize = 5 * 1024 * 1024; // 5MB\r\n    if (file.size > maxFileSize) {\r\n      reject(new Error('ไฟล์ใหญ่เกินไป กรุณาเลือกไฟล์ที่เล็กกว่า 5MB'));\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    \r\n    reader.onerror = () => {\r\n      reject(new Error('ไม่สามารถอ่านไฟล์ได้'));\r\n    };\r\n    \r\n    reader.onload = (e) => {\r\n      const img = new Image();\r\n      \r\n      img.onerror = () => {\r\n        reject(new Error('ไฟล์ไม่ใช่รูปภาพที่ถูกต้อง'));\r\n      };\r\n      \r\n      img.onload = () => {\r\n        try {\r\n          const canvas = document.createElement('canvas');\r\n          let width = img.width;\r\n          let height = img.height;\r\n          \r\n          // คำนวณขนาดใหม่ (รักษาสัดส่วน)\r\n          if (width > height) {\r\n            if (width > maxSize) {\r\n              height = Math.round((height * maxSize) / width);\r\n              width = maxSize;\r\n            }\r\n          } else {\r\n            if (height > maxSize) {\r\n              width = Math.round((width * maxSize) / height);\r\n              height = maxSize;\r\n            }\r\n          }\r\n          \r\n          // ตั้งค่า canvas\r\n          canvas.width = width;\r\n          canvas.height = height;\r\n          \r\n          const ctx = canvas.getContext('2d');\r\n          \r\n          // เพิ่มคุณภาพการ render\r\n          ctx.imageSmoothingEnabled = true;\r\n          ctx.imageSmoothingQuality = 'high';\r\n          \r\n          // วาดรูปลง canvas\r\n          ctx.drawImage(img, 0, 0, width, height);\r\n          \r\n          // แปลงเป็น base64 (JPEG สำหรับขนาดเล็กกว่า)\r\n          const compressedImage = canvas.toDataURL('image/jpeg', quality);\r\n          \r\n          // ตรวจสอบขนาดผลลัพธ์\r\n          const sizeInBytes = Math.round((compressedImage.length * 3) / 4);\r\n          const sizeInKB = Math.round(sizeInBytes / 1024);\r\n          \r\n          console.log(`Image compressed: ${sizeInKB}KB (${width}x${height})`);\r\n          \r\n          resolve(compressedImage);\r\n        } catch (error) {\r\n          reject(new Error('เกิดข้อผิดพลาดในการบีบอัดรูป'));\r\n        }\r\n      };\r\n      \r\n      img.src = e.target.result;\r\n    };\r\n    \r\n    reader.readAsDataURL(file);\r\n  });\r\n};\r\n\r\n/**\r\n * ตรวจสอบว่าเป็นไฟล์รูปภาพหรือไม่\r\n */\r\nexport const isImageFile = (file) => {\r\n  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\r\n  return validTypes.includes(file.type);\r\n};\r\n\r\n/**\r\n * แปลงขนาดไฟล์เป็น string ที่อ่านง่าย\r\n */\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}